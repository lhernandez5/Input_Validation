/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab14inputvalidation;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.Toolkit;
import java.util.Arrays;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author MC Lane
 */
public class StartFrame extends javax.swing.JFrame {

    private int formHeight = 400;
    private int formWidth = 480;
    private boolean allInputIsGood = true;
    private InfoModel myModel;

    /**
     * Creates new form StartFrame
     */
    public StartFrame(InfoModel model) {
        initComponents();
        myModel = model;

        centerForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        txtBirthDateMM = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtBirthDateDD = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtBirthDateYYYY = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtItemCount = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtItemCost = new javax.swing.JTextField();
        btnAccept = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        pwdFirst = new javax.swing.JPasswordField();
        pwdSecond = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Username:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Password:");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Confirm Password:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Birth Date:");

        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        txtBirthDateMM.setToolTipText("Enter 1-31");
        txtBirthDateMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBirthDateMMActionPerformed(evt);
            }
        });

        jLabel5.setText("/");

        txtBirthDateDD.setToolTipText("Enter 1-12");
        txtBirthDateDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBirthDateDDActionPerformed(evt);
            }
        });

        jLabel6.setText("/");

        txtBirthDateYYYY.setToolTipText("Enter four digits (i.e. 2014)");
        txtBirthDateYYYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBirthDateYYYYActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Item Count:");

        txtItemCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemCountActionPerformed(evt);
            }
        });

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Item Cost:");

        txtItemCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemCostActionPerformed(evt);
            }
        });

        btnAccept.setText("Submit");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        btnAccept.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnAcceptKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAcceptKeyPressed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.setFocusable(false);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtItemCost, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtBirthDateMM, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBirthDateDD, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBirthDateYYYY, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtItemCount, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pwdSecond, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                        .addComponent(pwdFirst, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(105, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnAccept)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit)
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(pwdFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pwdSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtBirthDateMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtBirthDateDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtBirthDateYYYY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtItemCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtItemCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAccept)
                    .addComponent(btnExit))
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void txtItemCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemCostActionPerformed

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    private void txtBirthDateMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBirthDateMMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBirthDateMMActionPerformed

    private void txtBirthDateDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBirthDateDDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBirthDateDDActionPerformed

    private void txtBirthDateYYYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBirthDateYYYYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBirthDateYYYYActionPerformed

    private void txtItemCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemCountActionPerformed

    /**
     * Respond to Accept button click. Create TotalFrame only if all data fields
     * are valid.
     */
    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        acceptInput();
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnAcceptKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAcceptKeyTyped
    }//GEN-LAST:event_btnAcceptKeyTyped

    private void btnAcceptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAcceptKeyPressed
        acceptInput();
    }//GEN-LAST:event_btnAcceptKeyPressed

    /**
     * Validate input data fields
     */
    private boolean validateInput() {
        //these constants could be used for comparisons in your validation edits
        final int MAXMONTH = 12;
        final int MINMONTH = 1;
        final int MINYEAR = 2014;
        final int[] MAXDAY = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        final int MIN_PWD_LENGTH = 8;

        //trim spaces from front and back of all input fields
        String name = txtUserName.getText().trim();
        char[] password1 = pwdFirst.getPassword();
        char[] password2 = pwdSecond.getPassword();
        String dateMM = txtBirthDateMM.getText().trim();
        String dateDD = txtBirthDateDD.getText().trim();
        String dateYYYY = txtBirthDateYYYY.getText().trim();
        String count = txtItemCount.getText().trim();
        String amount = txtItemCost.getText().trim();

        if (name.isEmpty()) {
            displayErrorMessage("Username field is empty. Please correct.");
            return false;
        }

        if (password1.length < 1) {
            displayErrorMessage("Password is not long enough. Must be 8 characters.");
            return false;
        }

        if (password2.length < 1) {
            displayErrorMessage("Password is not long enough. Must be 8 characters.");
            return false;
        }
        if (dateMM.isEmpty()) {
            displayErrorMessage("Birth day field is empty. Please correct.");
            return false;
        }
        if (dateDD.isEmpty()) {
            displayErrorMessage("Birth month field is empty. Please correct.");
            return false;
        }
        if (dateYYYY.isEmpty()) {
            displayErrorMessage("Birth year field is empty. Please correct.");
            return false;
        }
        if (count.isEmpty()) {
            displayErrorMessage("Item count field is empty. Please correct.");
            return false;
        }
        if (amount.isEmpty()) {
            displayErrorMessage("Item cost field is empty. Please correct.");
            return false;
        }

        //------------------------------------------------------------------------------
        //
        if (name.contains(" ")) {
            displayErrorMessage("Username contains a space. This is not allowed");
        }
        if (password1.length > 1) {
            for (char d : password1) {
                if (!Character.isLetterOrDigit(d)) {
                    displayErrorMessage("Password must only contain numbers or letters");
                    return false;
                }
            }
        }
        if (password1.length > 1) {
            boolean containsDigit = false;
            boolean foundDigit = false;
            for (char c : password1) {
                if (containsDigit = Character.isDigit(c)) {
                    foundDigit = true;
                    break;
                }
            }
            if (foundDigit == true) {

            } else if (foundDigit == false) {
                displayErrorMessage("Password must contain at least one number");
                return false;

            }
        }
        if (password1.length > 1) {
            boolean containsDigit = false;
            boolean foundDigit = false;
            for (char c : password1) {
                if (containsDigit = Character.isDigit(c)) {
                    foundDigit = true;
                    break;
                }
            }
            if (foundDigit == true) {

            } else if (foundDigit == false) {
                displayErrorMessage("Password must contain at least one number");
                return false;

            }
        }

        if (password1.length > 1) {
            String password = Arrays.toString(password1);
            boolean hasUppercase = !password.equals(password.toLowerCase());
            if (!hasUppercase) {
                displayErrorMessage("Password must contain at least one uppercase letter.");
                return false;
            }
        }

        if (!(Arrays.equals(password1, password2))) {
            displayErrorMessage("Passwords do not match.");
            return false;
        }

        if (dateMM.length()
                >= 0) {
            char[] array = new char[]{};
            array = dateMM.toCharArray();
            for (char o : array) {
                if (!Character.isDigit(o)) {
                    displayErrorMessage("Your month must be numeric.");
                    return false;
                }
            }
        }

        if (!dateMM.isEmpty()) {
            int result = Integer.parseInt(dateMM);
            if (result < MINMONTH || result > MAXMONTH) {
                displayErrorMessage("The month must be between 1 and 12.");
                return false;
            }

        }
        int date = Integer.parseInt(dateDD);
        if (date < 1 || date
                > 31) {
            displayErrorMessage("Day must be between 1-31. Please correct.");
            return false;
        }

        int year = Integer.parseInt(dateYYYY);
        if (year
                < 2014) {
            displayErrorMessage("The year must be 2014 or greater.");
            return false;
        }

        if (!count.isEmpty()) {
            char[] array = new char[]{};
            array = count.toCharArray();
            for (int p = 0; p < array.length; p++) {
                if (Character.isDigit(p)) {
                    displayErrorMessage("Your item count must be numeric.");
                    return false;
                }
            }

        }

        try {
            int countblah = Integer.parseInt(count);
            if (countblah < 0) {
                displayErrorMessage("Item count must be a postive number or 0. Please correct.");
                return false;
            }
        } catch (NumberFormatException e) {
            displayErrorMessage("Item count isn't a number. Please correct.");
            return false;
        }

        if (!amount.isEmpty()) {
            int result = Integer.parseInt(amount);
            if (result <= 0) {
                displayErrorMessage("Your item cost must be bumeric.");
                return false;

            }
        }

        String decimalPattern = "([1-9]*)\\.([1-9]*)";
        String number = count;
        boolean match = Pattern.matches(decimalPattern, number);
        if(!match){
            displayErrorMessage("Item cost isn't a double number. Please correct.");
            return false;
        }

        //
        //------------------------------------------------------------------------------
        //------------------------------------------------------------------------------
        //the only way to reach this point is for all input to be valid
        //store local variables into class variables that will be accessible when TotalFrame is created
        //then return with allInputIsGood still set true
        // once you have all the input validated, put it in the model
        // you might need to adjust some of these after validation 
        myModel.setName(name);

        myModel.setCount(Integer.parseInt(count));
        myModel.setCost(Double.parseDouble(amount));
        myModel.setFinalDate(dateMM
                + "/" + dateDD + "/" + dateYYYY);
        return allInputIsGood;
    }

    /**
     * Display the error message
     */
    private void displayErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Input Validation Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * respond to ACCEPT button click or ENTER key when Accept button has focus
     */
    private void acceptInput() {
        if (validateInput()) {
            // create the second frame, passing it the model, that holds the data
            TotalFrame myTotalFrame = new TotalFrame(myModel);
            myTotalFrame.setTitle("TotalFrame");
            myTotalFrame.setVisible(true);
        }
    }

    /**
     * Get dimensions of screen and center form
     */
    private void centerForm() {
        Toolkit tKit = Toolkit.getDefaultToolkit();
        Dimension screenSize = tKit.getScreenSize();
        this.setSize(formWidth, formHeight);
        this.setLocation(screenSize.width / 2 - formWidth / 2,
                screenSize.height / 2 - formHeight / 2);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPasswordField pwdFirst;
    private javax.swing.JPasswordField pwdSecond;
    private javax.swing.JTextField txtBirthDateDD;
    private javax.swing.JTextField txtBirthDateMM;
    private javax.swing.JTextField txtBirthDateYYYY;
    private javax.swing.JTextField txtItemCost;
    private javax.swing.JTextField txtItemCount;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

}
